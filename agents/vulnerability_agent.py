from typing import TypedDict
from langchain_openai import ChatOpenAI
from langgraph.graph import StateGraph, END, START

from utils.utils import write_section
from utils.tools import WebTool

llm = ChatOpenAI(model="gpt-4o", temperature=0)


class VulnerabilityState(TypedDict):
    month: str
    year: str
    critical_vulnerabilities: str
    software_vulnerabilities: str
    network_device_vulnerabilities: str
    zero_day_vulnerabilities: str
    vulnerability_summary: str


class VulnerabilityOutputState(TypedDict):
    vulnerability_summary: str


class VulnerabilityAgent:
    def __init__(self):
        self.graph = StateGraph(VulnerabilityState, output=VulnerabilityOutputState)
        self._setup_graph()
        self.search_web_tool = WebTool()

    def _setup_graph(self):
        self.graph.add_node(
            "search_critical_vulnerabilities", self.search_critical_vulnerabilities
        )
        self.graph.add_node(
            "gather_software_vulnerabilities", self.gather_software_vulnerabilities
        )
        self.graph.add_node(
            "focus_network_device_vulnerabilities",
            self.focus_network_device_vulnerabilities,
        )
        self.graph.add_node(
            "monitor_zero_day_vulnerabilities", self.monitor_zero_day_vulnerabilities
        )
        self.graph.add_node("summarize", self.summarize)

        self.graph.add_edge(START, "search_critical_vulnerabilities")
        self.graph.add_edge("search_critical_vulnerabilities", "summarize")

        self.graph.add_edge(START, "gather_software_vulnerabilities")
        self.graph.add_edge("gather_software_vulnerabilities", "summarize")

        self.graph.add_edge(START, "focus_network_device_vulnerabilities")
        self.graph.add_edge("focus_network_device_vulnerabilities", "summarize")

        self.graph.add_edge(START, "monitor_zero_day_vulnerabilities")
        self.graph.add_edge("monitor_zero_day_vulnerabilities", "summarize")

        self.graph.add_edge("summarize", END)

    def search_critical_vulnerabilities(
        self, state: VulnerabilityState
    ) -> VulnerabilityState:
        query = f"""Top vulnerabilities discovered in {state['month']} {state['year']} across various software platforms and services, including their impact, and 
        details on vulnerability types such as remote code execution, privilege escalation, and others.
        """
        result = self.search_web_tool.search_web(query)
        return {"critical_vulnerabilities": result}

    def gather_software_vulnerabilities(
        self, state: VulnerabilityState
    ) -> VulnerabilityState:
        query = f"""Recent vulnerabilities in popular software platforms and operating systems, 
        including details on types such as remote code execution, privilege escalation, and known exploits identified in {state['month']} {state['year']}.
        """
        result = self.search_web_tool.search_web(query)
        return {"software_vulnerabilities": result}

    def focus_network_device_vulnerabilities(
        self, state: VulnerabilityState
    ) -> VulnerabilityState:
        query = f"""Critical vulnerabilities discovered in network devices like routers, firewalls, 
        and VPN systems, including actively exploited vulnerabilities and security advisories from {state['month']} {state['year']}.
        """
        result = self.search_web_tool.search_web(query)
        return {"network_device_vulnerabilities": result}

    def monitor_zero_day_vulnerabilities(
        self, state: VulnerabilityState
    ) -> VulnerabilityState:
        query = f"""Latest zero-day vulnerabilities exploited in cyberattacks, real-world examples of exploitation, 
        their impact on systems, and mitigation measures from {state['month']} {state['year']}.
        """
        result = self.search_web_tool.search_web(query)
        return {"zero_day_vulnerabilities": result}

    def summarize(self, state: VulnerabilityState) -> VulnerabilityOutputState:
        context = "\n".join(
            [
                state["critical_vulnerabilities"],
                state["network_device_vulnerabilities"],
                state["software_vulnerabilities"],
                state["zero_day_vulnerabilities"],
            ]
        )
        summarized_text = write_section(llm, context, focus="Vulnerability Information")
        return {"vulnerability_summary": summarized_text}

    def compile(self):
        return self.graph.compile()


vulnerability_agent = VulnerabilityAgent().compile()
